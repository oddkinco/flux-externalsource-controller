# Data Transformation Example
#
# This example demonstrates how to use hooks with jq and other commands
# to transform API responses before packaging them as artifacts.
#
# Expected behavior:
# - Fetches raw data from an API
# - Applies hook transformations to restructure the data
# - Packages the transformed data as a Kubernetes ConfigMap
#
# Usage:
#   kubectl apply -f data-transformation.yaml
#   kubectl get externalsource transformed-config -w

apiVersion: source.flux.oddkin.co/v1alpha1
kind: ExternalSource
metadata:
  name: transformed-config
  namespace: default
  labels:
    app.kubernetes.io/name: flux-externalsource-controller
    example: data-transformation
spec:
  # Check for updates every 10 minutes
  interval: 10m
  maxRetries: 3
  
  # Place the transformed data at this path within the artifact
  destinationPath: configmap.yaml
  
  # HTTP generator configuration
  generator:
    type: http
    http:
      # API that returns raw configuration data
      url: https://api.example.com/app/settings
      method: GET
  
  # Post-request hooks to transform the response
  hooks:
    postRequest:
      # Step 1: Extract relevant fields and create ConfigMap structure
      - name: create-configmap
        command: jq
        args:
          - |
            {
              "apiVersion": "v1",
              "kind": "ConfigMap",
              "metadata": {
                "name": "app-settings",
                "namespace": "default"
              },
              "data": {
                "database_url": .database.url,
                "redis_url": .cache.redis_url,
                "log_level": .logging.level,
                "feature_flags": (.features | tostring)
              }
            }
        timeout: "10s"
        retryPolicy: fail
      
      # Step 2: Convert to YAML format
      - name: to-yaml
        command: yq
        args:
          - "-P"
        timeout: "5s"
        retryPolicy: retry

---
# Example 2: Extract specific fields from a complex API response
apiVersion: source.flux.oddkin.co/v1alpha1
kind: ExternalSource
metadata:
  name: filtered-config
  namespace: default
  labels:
    app.kubernetes.io/name: flux-externalsource-controller
    example: field-extraction
spec:
  interval: 15m
  maxRetries: 5
  destinationPath: app-config.json
  
  generator:
    type: http
    http:
      url: https://api.example.com/complex-config
  
  # Extract only the fields we need from a complex response
  hooks:
    postRequest:
      - name: extract-fields
        command: jq
        args:
          - |
            {
              "environment": .env.name,
              "version": .app.version,
              "endpoints": {
                "api": .services.api.endpoint,
                "database": .services.database.connection_string
              },
              "limits": {
                "max_connections": .limits.connections,
                "timeout": .limits.request_timeout
              }
            }
        timeout: "10s"
        retryPolicy: retry

---
# Example 3: Conditional transformation based on data content
apiVersion: source.flux.oddkin.co/v1alpha1
kind: ExternalSource
metadata:
  name: conditional-config
  namespace: default
  labels:
    app.kubernetes.io/name: flux-externalsource-controller
    example: conditional-transformation
spec:
  interval: 20m
  maxRetries: 3
  destinationPath: environment-config.yaml
  
  generator:
    type: http
    http:
      url: https://config-api.example.com/environment/production
  
  # Apply different transformations based on environment
  hooks:
    postRequest:
      - name: conditional-transform
        command: jq
        args:
          - |
            if .environment == "production" then
              {
                "apiVersion": "v1",
                "kind": "Secret",
                "metadata": {"name": "prod-config"},
                "type": "Opaque",
                "data": {
                  "database_url": (.database_url | @base64),
                  "api_key": (.api_key | @base64)
                }
              }
            else
              {
                "apiVersion": "v1",
                "kind": "ConfigMap",
                "metadata": {"name": "dev-config"},
                "data": {
                  "database_url": .database_url,
                  "debug": "true"
                }
              }
            end
        timeout: "15s"
        retryPolicy: fail
      
      - name: to-yaml
        command: yq
        args:
          - "-P"
        timeout: "5s"
        retryPolicy: retry

---
# Example 4: Array processing and filtering
apiVersion: source.flux.oddkin.co/v1alpha1
kind: ExternalSource
metadata:
  name: service-discovery
  namespace: default
  labels:
    app.kubernetes.io/name: flux-externalsource-controller
    example: array-processing
spec:
  interval: 5m
  maxRetries: 3
  destinationPath: services.yaml
  
  generator:
    type: http
    http:
      url: https://service-registry.example.com/services
  
  # Filter and transform an array of services
  hooks:
    postRequest:
      # Step 1: Filter healthy services and transform
      - name: filter-and-transform
        command: jq
        args:
          - |
            {
              "apiVersion": "v1",
              "kind": "ConfigMap",
              "metadata": {"name": "service-endpoints"},
              "data": {
                "services.json": (
                  .services 
                  | map(select(.status == "healthy"))
                  | map({
                      name: .name,
                      endpoint: .endpoint,
                      port: .port,
                      version: .version
                    })
                  | tostring
                )
              }
            }
        timeout: "15s"
        retryPolicy: retry
      
      # Step 2: Convert to YAML
      - name: to-yaml
        command: yq
        args:
          - "-P"
        timeout: "5s"
        retryPolicy: retry

---
# Hook Transformation Reference:
#
# Common jq functions:
# - .field: Access object field
# - .array[]: Iterate array elements
# - select(condition): Filter elements
# - map(expression): Transform array elements
# - @base64: Base64 encode string
# - tostring: Convert to string
# - if/then/else/end: Conditional logic
#
# Retry policies:
# - fail: Stop on error (default)
# - retry: Retry on error up to maxRetries
# - ignore: Continue on error
#
# Troubleshooting transformations:
# 1. Check the raw API response format
# 2. Test jq expressions independently
# 3. Use simple expressions first, then add complexity
# 4. Check ExternalSource status for hook errors
# 5. Review controller logs for detailed error messages
# 6. Verify commands are in the whitelist ConfigMap
