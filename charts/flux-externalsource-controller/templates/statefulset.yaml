apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "flux-externalsource-controller.fullname" . }}-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "flux-externalsource-controller.labels" . | nindent 4 }}
    app.kubernetes.io/component: manager
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "flux-externalsource-controller.artifactHeadlessServiceName" . }}
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      {{- include "flux-externalsource-controller.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: manager
  template:
    metadata:
      labels:
        {{- include "flux-externalsource-controller.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: manager
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "flux-externalsource-controller.serviceAccountName" . }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.controller.securityContext | nindent 8 }}
      containers:
      - name: manager
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /manager
        args:
        {{- if .Values.controller.leaderElection }}
        - --leader-elect
        {{- end }}
        - --zap-log-level={{ .Values.controller.logLevel }}
        env:
        - name: STORAGE_BACKEND
          value: {{ .Values.controller.storage.backend }}
        {{- if eq .Values.controller.storage.backend "s3" }}
        {{- if .Values.controller.storage.s3.bucket }}
        - name: S3_BUCKET
          value: {{ .Values.controller.storage.s3.bucket }}
        {{- end }}
        {{- if .Values.controller.storage.s3.region }}
        - name: S3_REGION
          value: {{ .Values.controller.storage.s3.region }}
        {{- end }}
        {{- if .Values.controller.storage.s3.endpoint }}
        - name: S3_ENDPOINT
          value: {{ .Values.controller.storage.s3.endpoint }}
        {{- end }}
        {{- if .Values.controller.storage.s3.credentialsSecret.name }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.controller.storage.s3.credentialsSecret.name }}
              key: {{ .Values.controller.storage.s3.credentialsSecret.accessKeyKey }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.controller.storage.s3.credentialsSecret.name }}
              key: {{ .Values.controller.storage.s3.credentialsSecret.secretKeyKey }}
        {{- end }}
        {{- end }}
        {{- if eq .Values.controller.storage.backend "pvc" }}
        - name: PVC_STORAGE_PATH
          value: {{ .Values.controller.storage.pvc.path }}
        {{- end }}
        - name: HTTP_TIMEOUT
          value: {{ .Values.controller.http.timeout }}
        - name: TRANSFORM_TIMEOUT
          value: {{ .Values.controller.transform.timeout }}
        {{- if .Values.controller.hookExecutor.enabled }}
        - name: HOOK_EXECUTOR_ENDPOINT
          value: {{ .Values.controller.hookExecutor.endpoint }}
        - name: HOOK_WHITELIST_PATH
          value: {{ .Values.controller.hookExecutor.whitelistPath }}
        - name: HOOK_DEFAULT_TIMEOUT
          value: {{ .Values.controller.hookExecutor.timeout }}
        {{- end }}
        - name: ARTIFACT_SERVER_PORT
          value: "8080"
        - name: ARTIFACT_SERVER_ENABLED
          value: "true"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVICE_NAME
          value: {{ include "flux-externalsource-controller.artifactHeadlessServiceName" . }}
        {{- with .Values.controller.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        ports:
        - containerPort: 8080
          name: artifacts
          protocol: TCP
        {{- if .Values.webhook.enabled }}
        - containerPort: {{ .Values.webhook.port }}
          name: webhook-server
          protocol: TCP
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          {{- toYaml .Values.controller.resources | nindent 10 }}
        securityContext:
          {{- toYaml .Values.controller.containerSecurityContext | nindent 10 }}
        volumeMounts:
        - name: hook-whitelist
          mountPath: /etc/hooks
          readOnly: true
        {{- if eq .Values.controller.storage.backend "pvc" }}
        - name: artifact-storage
          mountPath: {{ .Values.controller.storage.pvc.path }}
        {{- end }}
        {{- with .Values.controller.volumeMounts }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if .Values.controller.hookExecutor.enabled }}
      - name: externalsource-hook-executor
        image: "{{ .Values.controller.hookExecutor.image.repository }}:{{ .Values.controller.hookExecutor.image.tag }}"
        imagePullPolicy: {{ .Values.controller.hookExecutor.image.pullPolicy }}
        command:
        - /app/externalsource-hook-executor
        args:
        - --port
        - "{{ .Values.controller.hookExecutor.port }}"
        - --whitelist
        - {{ .Values.controller.hookExecutor.whitelistPath }}
        ports:
        - containerPort: {{ .Values.controller.hookExecutor.port }}
          name: http
          protocol: TCP
        securityContext:
          {{- toYaml .Values.controller.hookExecutor.containerSecurityContext | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.controller.hookExecutor.port }}
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.controller.hookExecutor.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.controller.hookExecutor.resources | nindent 10 }}
        volumeMounts:
        - name: hook-whitelist
          mountPath: /etc/hooks
          readOnly: true
      {{- end }}
      volumes:
      - name: hook-whitelist
        configMap:
          name: {{ include "flux-externalsource-controller.fullname" . }}-hook-whitelist
      {{- with .Values.controller.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
  {{- if eq .Values.controller.storage.backend "pvc" }}
  volumeClaimTemplates:
  - metadata:
      name: artifact-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      {{- if .Values.controller.storage.pvc.storageClass }}
      storageClassName: {{ .Values.controller.storage.pvc.storageClass }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.controller.storage.pvc.size }}
  {{- end }}


