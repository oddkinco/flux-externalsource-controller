events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    server {
        listen 80;
        server_name localhost;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API endpoints for testing
        location /api/v1/config {
            add_header Content-Type application/json;
            add_header ETag "config-v1.0";
            return 200 '{"database":{"url":"postgres://localhost:5432/myapp"},"redis":{"url":"redis://localhost:6379"},"logging":{"level":"info"},"features":{"feature_a":true,"feature_b":false}}';
        }
        
        location /api/v1/users {
            add_header Content-Type application/json;
            add_header ETag "users-v2.1";
            return 200 '[{"id":1,"name":"Alice","email":"alice@example.com"},{"id":2,"name":"Bob","email":"bob@example.com"}]';
        }
        
        location /api/v1/settings {
            add_header Content-Type application/json;
            add_header ETag "settings-v1.5";
            return 200 '{"app_name":"MyApp","version":"1.2.3","environment":"production","limits":{"max_connections":100,"timeout":30}}';
        }
        
        # Authenticated endpoint (checks for Authorization header)
        location /api/v1/secure-config {
            # Simple auth check
            if ($http_authorization != "Bearer test-token-123") {
                return 401 '{"error":"Unauthorized"}';
            }
            add_header Content-Type application/json;
            add_header ETag "secure-config-v1.0";
            return 200 '{"secret_key":"super-secret-value","database_password":"secure-password-123"}';
        }
        
        # Endpoint that returns different data based on query parameters
        location /api/v1/environment-config {
            set $env_data '{"environment":"development","debug":true}';
            
            if ($arg_env = "staging") {
                set $env_data '{"environment":"staging","debug":false,"replicas":2}';
            }
            
            if ($arg_env = "production") {
                set $env_data '{"environment":"production","debug":false,"replicas":5,"monitoring":true}';
            }
            
            add_header Content-Type application/json;
            add_header ETag "env-config-$arg_env-v1.0";
            return 200 $env_data;
        }
        
        # Endpoint that simulates slow responses
        location /api/v1/slow-config {
            add_header Content-Type application/json;
            # Simulate 2 second delay
            echo_sleep 2;
            echo '{"message":"This response was delayed","timestamp":"2025-01-01T12:00:00Z"}';
        }
        
        # Endpoint that returns errors occasionally
        location /api/v1/flaky-config {
            # Return error 30% of the time
            set $random_num $msec;
            if ($random_num ~ ".*[0-2]$") {
                return 500 '{"error":"Internal server error","retry_after":30}';
            }
            
            add_header Content-Type application/json;
            return 200 '{"status":"ok","data":"reliable-data"}';
        }
        
        # Static files for testing
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
    }
}