name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-and-push-helm-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build-and-push-image
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "chart-version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Chart.yaml with release version
      run: |
        sed -i "s/version: 0.1.0/version: ${{ steps.version.outputs.chart-version }}/" charts/fx-controller/Chart.yaml
        sed -i "s/appVersion: \"0.1.0\"/appVersion: \"${{ steps.version.outputs.version }}\"/" charts/fx-controller/Chart.yaml

    - name: Package Helm chart
      run: |
        helm package charts/fx-controller --destination ./charts/

    - name: Push Helm chart to OCI registry
      run: |
        helm push ./charts/fx-controller-${{ steps.version.outputs.chart-version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts

  create-release-artifacts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    needs: [build-and-push-image, build-and-push-helm-chart]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate installation manifests
      run: |
        # Create installation directory
        mkdir -p dist/install

        # Generate CRDs
        make manifests
        cp config/crd/bases/*.yaml dist/install/

        # Generate RBAC and deployment manifests
        cd config/default
        kustomize edit set image controller=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        cd ../..
        kustomize build config/default > dist/install/fx-controller.yaml

        # Create combined installation file
        cat dist/install/*.yaml > dist/install.yaml

    - name: Create Helm chart archive
      run: |
        # Update chart version
        sed -i "s/version: 0.1.0/version: ${{ steps.version.outputs.version }}/" charts/fx-controller/Chart.yaml
        sed -i "s/appVersion: \"0.1.0\"/appVersion: \"${{ steps.version.outputs.version }}\"/" charts/fx-controller/Chart.yaml
        
        # Package chart
        helm package charts/fx-controller --destination ./dist/

    - name: Generate checksums
      run: |
        cd dist
        sha256sum *.yaml *.tgz > checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/install.yaml
          dist/fx-controller-*.tgz
          dist/checksums.txt
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build-and-push-image, build-and-push-helm-chart, create-release-artifacts]
    if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update README with latest version
      run: |
        # Update installation commands in README
        sed -i "s|ghcr.io/example/fx-controller:.*|ghcr.io/example/fx-controller:${{ steps.version.outputs.version }}|g" README.md
        sed -i "s|/releases/latest/download/|/releases/download/v${{ steps.version.outputs.version }}/|g" README.md

    - name: Update Helm chart documentation
      run: |
        # Update chart version references
        sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${{ steps.version.outputs.version }}/g" charts/fx-controller/README.md || true

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md charts/fx-controller/README.md || true
        git diff --staged --quiet || git commit -m "docs: update version references to ${{ steps.version.outputs.version }}"
        git push || true